# ---
# Optimized docker compose for m1 mac mini to mock a service similar to aws.emr
#
# - workers : 2 with 3 cores each = 6 cores ... leaving 2 cores for system ops
# - memroy : 4GB per worker, 1GB for master
# - G1GC garbage collector for better arm64 perf
# - resource limits prevent container memory issues
# ---
services:
  spark-master:
    image: apache/spark:3.4.0
    hostname: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      # M1 optimization flags
      - SPARK_DAEMON_MEMORY=1g
    ports:
      - "8080:8080"
      - "7077:7077"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'

  spark-worker-1:
    image: apache/spark:3.4.0
    hostname: spark-worker-1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=3
      - SPARK_WORKER_MEMORY=4G
      - SPARK_DAEMON_MEMORY=1g
      # Performance tuning
      - SPARK_WORKER_OPTS="-Xmx4g -XX:+UseG1GC"
    deploy:
      resources:
        limits:
          memory: 5G
          cpus: '3'

  spark-worker-2:
    image: apache/spark:3.4.0
    hostname: spark-worker-2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=3
      - SPARK_WORKER_MEMORY=4G
      - SPARK_DAEMON_MEMORY=1g
      - SPARK_WORKER_OPTS="-Xmx4g -XX:+UseG1GC"
    deploy:
      resources:
        limits:
          memory: 5G
          cpus: '3'